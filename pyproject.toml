[project]
name = "pytest-history"
version = "0.3.0"
description = "Pytest plugin to keep a history of your pytest runs"
authors = [
    {name = "Nicola Coretti", email = "nico.coretti@gmail.com"},
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
]
keywords = ["pytest", "sqlite", "sql", "history"]
requires-python = ">=3.8"
dependencies = [
    "pytest>=7.4.3",
]

[project.urls]
repository = "https://github.com/Nicoretti/one-piece/tree/grand-line/python/pytest-history"

[project.entry-points.pytest11]
pytest-history = "pytest_history"

[project.scripts]
pytest-history = "pytest_history.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pytest_history"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[dependency-groups]
dev = [
    "coverage>=7.6.1",
    "ruff>=0.8.3",
]

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
order-by-type = true
required-imports = ["from __future__ import annotations"]
